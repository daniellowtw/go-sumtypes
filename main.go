package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"golang.org/x/tools/go/packages"
)

var (
	typeNamesF   = flag.String("type", "", "comma-separated list of type names; must be set")
	sumTypeNameF = flag.String("name", "", "comma-separated list of type names; must be set")
	output       = flag.String("output", "", "output file name; default srcdir/<type>_string.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage:\n")
	fmt.Fprintf(os.Stderr, "\tgo-sumtypes [flags] -type T1,T2 -name T\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("stringer: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNamesF) == 0 || (*sumTypeNameF) == "" {
		flag.Usage()
		os.Exit(2)
	}
	typeNames := strings.Split(*typeNamesF, ",")
	sumTypeName := *sumTypeNameF

	// Parse the package once.
	// Support only current file for now.
	dir := filepath.Dir(".")

	g := Generator{}
	g.parsePackage([]string{"."})

	// Print the header and package clause.
	g.Printf("// Code generated by \"go-sumtypes %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")

	visitorName := fmt.Sprintf("%sVisitor", sumTypeName)
	g.generateTypeInterfaces(sumTypeName, visitorName, typeNames)
	g.generateSumType(sumTypeName, visitorName, typeNames)
	g.generateVisitorHelper(sumTypeName, visitorName, typeNames)

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_sumtypes_generated.go", sumTypeName)
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName string // Name of the constant type.
}

type Package struct {
	name  string
	defs  map[*ast.Ident]types.Object
	files []*File
}

// parsePackage analyzes the single package constructed from the patterns and tags.
// parsePackage exits if there is an error.
func (g *Generator) parsePackage(patterns []string) {
	cfg := &packages.Config{
		Mode: packages.NeedTypes,
		Tests: false,
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}
	g.addPackage(pkgs[0])
}

// addPackage adds a type checked Package and its syntax files to the generator.
func (g *Generator) addPackage(pkg *packages.Package) {
	g.pkg = &Package{
		name:  pkg.Name,
		defs:  pkg.TypesInfo.Defs,
		files: make([]*File, len(pkg.Syntax)),
	}

	for i, file := range pkg.Syntax {
		g.pkg.files[i] = &File{
			file: file,
			pkg:  g.pkg,
		}
	}
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

// Helpers
func (g *Generator) generateTypeInterfaces(name string, visitorName string, typ []string) {
	for _, s := range typ {
		g.Printf("var _ %s = (*%s)(nil)\n", name, s)
	}

	for _, s := range typ {
		g.Printf("func (x *%s) Match(v %s) { v.Case%s(x) }\n", s, visitorName, s)
	}
}

func (g *Generator) generateSumType(name string, visitorName string, typ []string) {
	g.Printf("\n")
	g.Printf(`type %s interface {
	Match(%s)
}
`, name, visitorName)

	g.Printf(`
type %s interface {
`, visitorName)
	for _, s := range typ {
		g.Printf("Case%s(*%s)\n", s, s)
	}
	g.Printf("\n}\n")
}

func (g *Generator) generateVisitorHelper(sumTypeName string, visitorName string, typ []string) {
	helperStructName := fmt.Sprintf("%sImpl", visitorName)
	g.Printf(`
type %s struct {
`, helperStructName)
	for _, s := range typ {
		g.Printf("Case%sFunc func(*%s)\n", s, s)
	}
	g.Printf("\n}\n")
	for _, s := range typ {
		g.Printf(`func (c %s) Case%s(x *%s) {
	if c.Case%s == nil { return }
	c.Case%s(x)
}
`, helperStructName, s, s, s, s)
	}

	g.Printf(`func %sMatcher(
`, sumTypeName)
	for _, s := range typ {
		g.Printf(`case%s func (%s *%s),
`, s, s, s)
	}
	g.Printf(`) %s {
return %s {
`, visitorName, helperStructName)

	for _, s := range typ {
		g.Printf(`Case%sFunc: case%s,
`, s, s)
	}
	g.Printf(`}
}`)

}
